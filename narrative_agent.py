from openai import OpenAI

class NarrativeAgent:
    def __init__(self, role: str, repo_name: str, qa_pairs: list, model="gpt-4"):
        self.role = role
        self.repo_name = repo_name
        self.qa_pairs = qa_pairs
        self.model = model

    def _compose_paragraph(self, question, answer):
        prompt = (
            f"You are a technical writer preparing a report for a {self.role}.\n"
            f"The repository is named '{self.repo_name}'.\n\n"
            f"Given the following insight:\n\n"
            f"Q: {question}\nA: {answer}\n\n"
            f"Write a concise, clear paragraph for a report. Avoid repeating the question.\n"
        )
        client = OpenAI()

        response = client.chat.completions.create(
            model=self.model,
            messages=[
                {"role": "system", "content": "You are a helpful technical writing assistant."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.5
        )

        return response.choices[0].message.content.strip()


    def build_narrative(self):
        print("ðŸ¤– Building stitched narrative in one pass...")

        # Assemble a single message with all Q&A pairs
        qa_text = "\n\n".join(
            [f"Q{i+1}: {qa['question']}\nA{i+1}: {qa['answer']}" for i, qa in enumerate(self.qa_pairs)]
        )

        prompt = (
        f"You are a technical writer preparing a high-level report for a {self.role}.\n"
        f"The repository is named '{self.repo_name}'.\n\n"
        f"Below are ten Q&A pairs based on a code and documentation analysis.\n"
        f"Your task is to write a smooth and coherent narrative that reads like an experienced human wrote it.\n\n"
        f"{qa_text}\n\n"
        f"Instructions:\n"
        f"1. Do not use markdown headings (#, ##, etc.). Use clear paragraph-style prose.\n"
        f"2. Mention bugs, issues, or limitations where relevant â€” but never say 'in the context' or 'from the data provided'. Just write as if you naturally know it.\n"
        f"3. Use bullet points only if the list adds clarity. Avoid overuse.\n"
        f"4. Include short code snippets only if they strengthen an explanation.\n"
        f"5. Do not mention that the report was generated by an AI.\n"
        f"6. Write with authority and clarity, as though the writer understands the full project.\n"
        f"7. Close the report with a short summary paragraph (optional).\n"
    )

        client = OpenAI()
        response = client.chat.completions.create(
            model=self.model,
            messages=[
                {"role": "system", "content": "You are a helpful technical writing assistant."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.5
        )

        return response.choices[0].message.content.strip()

